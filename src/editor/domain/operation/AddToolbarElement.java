package editor.domain.operation;

import editor.application.App;
import editor.domain.Element;
import editor.domain.Operation;
import editor.domain.ToolbarElement;

/**
* An operation aiming at adding a new tool to the toolbar.
* 
* @author Adrien Boitelle
* @version 1.0
*/
public class AddToolbarElement extends Operation {

    /**
     * An element that will be added to the toolbar as a tool
     */
    protected Element toAdd;

    /**
     * The tool that has been generated by the action 
     */
    protected ToolbarElement created;

    /**
     * Create a new tool from an element, then add it to the toolbar when performed.
     * 
     * @param toAdd The element used as a pattern for the new tool
     */
    public AddToolbarElement(Element toAdd) {
        this.toAdd = toAdd.Clone();
    }

    @Override
    public void Do() {
        created = App.model.getToolbar().addElement(toAdd);

        (new SaveToolbar()).Do();
    }

    @Override
    public void Undo() {
        if(created != null) {
            App.model.getToolbar().removeElement(created);

            (new SaveToolbar()).Do();
        }
    }

    @Override
    public boolean Doable() {
        return App.model != null;
    }
    
}